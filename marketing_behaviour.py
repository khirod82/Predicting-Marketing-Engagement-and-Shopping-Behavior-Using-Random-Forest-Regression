# -*- coding: utf-8 -*-
"""Marketing Behaviour.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BITFNph7ECL43fiOO_dUMePvQDQ5ACpA
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv("/content/marketing_data.csv")
df.head()

df = df.drop('User_ID', axis=1)

# Handle missing values
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = df[col].fillna(df[col].mode()[0])
    else:
        df[col] = df[col].fillna(df[col].mean())

# Encode categorical features
le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = le.fit_transform(df[col])

# Define features (X) and target (y)
X = df.drop('shopping', axis=1)
y = df['shopping']

# Scale numerical features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# RandomForestRegressor for continuous target
classifier = RandomForestRegressor(random_state=42) # Instantiate the regressor

# Train the model
classifier.fit(X_train, y_train)

# Evaluate the model using metrics appropriate for regression
mse = mean_squared_error(y_test, y_pred) # Calculate Mean Squared Error
print(f"Mean Squared Error: {mse}")